VARIABLES - TIPO - OPERADORES - EXPRESIONES - ESTRUCTURAS

EJERCICIO 1

Variables:
    a <bool>
    b <string>
    c <string>
    d <int>
    f <int>
    g <int>

Operadores
    ++ -> operador de incremento en una unidad
    += -> operador de incremento en varias unidades
    * -> operador binario de multiplicación
    bool ? .. : .. -> operador ternario condicional

Funciones
    doble($i) -> función que retorna el doble de un elemento i 
    is_int(<mixed> $i) -> determina si una variable pasada como parámetro es de tipo int
    is_string (<mixed> $i) -> determina si una variable pasada como parámetro es de tipo string
    gettype(<mixed> $i) -> retorna el tipo de la variable pasada como parámetro

Estructuras de control
    if -> condicional

Salida
    booleanstringstringinteger1xyzxyz184444

EJERCICIO 2

a. Los tres códigos son equivalentes. En el primero se utiliza la estructura while (mientras) para iterar sobre
la variable previamente declarada $i hasta que la misma llegue a un valor igual a 10. En el segundo se utiliza
la misma estructura pero escrita de otra forma, especificando claramente donde termina la misma, además el contador
es incrementado en una línea aparte. Por útlimo, la tercera forma utiliza la estructura do-while (hacer-mientras) 
la cual realiza ciertas acciones hasta que la condición escrita dentro del while sea falsa.

b. Los cuatro códigos son equivalentes. En el primero se utiliza la estructura for (para) bien estándar, con el 
contador declarado en su valor base, la condición de fin y el incremento del contador que se ejecuta al final de todo.
En la segunda, el cuerpo del for se incluye dentro de su tercer parámetro antes del incremento, es por ello que arroja
la misma salida, si estuviera al revés ($i++, print $i) la salida sería distinta (iría de 2 a 11). El tercero no 
especifica la condición de fin por lo que utiliza la sentencia break para que cuando se cumpla que $i>10 se rompa el
ciclo. El último se podría decir que es todo manual, el inicio del contador se declara afuera de la estructura y 
tanto la condición de fin como el incremento se hardcodean en el cuerpo. 

c. Los dos códigos son equivalentes. En el primero se determina mediante una estructura de cascada de condiciones el 
valor de una variable $i. En el segundo, se utiliza la estructura switch-case (cambiador) que cae sobre el caso correcto
de $i y muestra la salida indicada.

EJERCICIO 3

a. Para el documento de título Documento 1, muestra al 90% del ancho de la pantalla, una tabla que contiene 5 filas
y 2 columnas con borde de 1 y espacios en blanco en el cuerpo de cada celda.

b. Si el formulario no está enviado muestra el formulario que pide un input de edad el cual envía por método POST
al mismo archivo php. Si está enviado, realiza una comprobación del campo edad y muestra si es mayor o menor a 21.

EJERCICIO 4

En primer lugar, se producen errores pues las variables $flor y $color no se encuentran definidas. Esto se debe a 
que el archivo que contiene dichas variables aún no se encuentra importado con la sentencia include. Es por ello que
en el segundo caso, la salida es correcta y se muestra 'El clavel blanco'.

EJERCICIO 5

Ver carpeta Contador_visitas.

-------------------------------------------------------------------------------

ARRAYS - FUNCIONES 

EJERCICIO 1

Ambos códigos son equivalentes. En el primero se define un Array como un mapeo <string><string> con la salvedad de que
el último registro no tiene key, por lo que se almacena en [0]. De la misma forma, en el segundo caso se ingresa
manualmente a cada key con [] y el caso del 4 se ve un poco más claro como es que no se le asigna ninguna key y una vez
se almacena en $a[0].

EJERCICIO 2

a. La salida del código es bar1, esto se debe a que se accede al Array en formato de keys, al principio sobre "x" y 
luego sobre 12. En este último caso se muestra 1 que determina true, si fuera false mostraría 0.

b. En este caso se representa una concatenación de Arrays, es decir que hay uno dentro del otro representando el que 
se encuentra adentro un mapeo entre key y valor. Además, se podría permitir el agregado de más valores dentro $matriz.
Para su acceso se utiliza el doble corchete [][] y la salida es 5 9 42. 

c. En este último ejemplo, la salida es nula, es decir que no muestra nada. Esto se debe a que en la última línea se
realiza unset($matriz) que remueve la variable del contexto, es decir que ya no está definida. 

EJERCICIO 3

a. Este código hace uso de la función getdate() que obtiene la fecha y la hora de la computadora. Luego para acceder 
a sus datos se trabaja como un array con key donde por ejemplo en [hours] se almacenan las horas. Entonces por ejemplo,
corriendo el código ahora, la salida resulta "Has entrado en esta pagina a las 10 horas, con 6 minutos y 33
segundos, del 24/8/2022".

b. Se llama a una función que suma dos números y directamente en su cuerpo sin utilizar un valor de retorno muestra la
operación completa visualizando los dos números pasados como parámetros y el resultado: 5+6=11. 

EJERCICIO 4
